# -*- coding: utf-8 -*-
"""
Tencent is pleased to support the open source community by making BK-BASE 蓝鲸基础平台 available.
Copyright (C) 2021 THL A29 Limited, a Tencent company.  All rights reserved.
BK-BASE 蓝鲸基础平台 is licensed under the MIT License.
License for BK-BASE 蓝鲸基础平台:
--------------------------------------------------------------------
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import datetime
import json

from dataquality.exceptions import ConstantTypeNotSupportedError
from dataquality.model.base import ConstantType


class Metric(object):
    """
    The metric instance of the determined dimensions(tags).
    Generated by the MetricFactory
    """

    def __init__(self, name, value, unit, timestamp, tags, **kwargs):
        super(Metric, self).__init__()
        self._name = name
        self._value = value
        self._unit = unit
        self._timestamp = timestamp
        self._tags = tags or {}

    @property
    def name(self):
        return self._name

    @property
    def value(self):
        return self._value

    @property
    def unit(self):
        return self._unit

    @property
    def timestamp(self):
        return self._timestamp

    @property
    def time_str(self):
        return datetime.datetime.fromtimestamp(self._timestamp).strftime(
            "%Y-%m-%d %H:%M:%S"
        )

    @property
    def tags(self):
        return self._tags

    def get_tag(self, tag, default_value=None):
        return self._tags.get(tag, default_value)

    def as_dict(self):
        obj = {
            "name": self.name,
            "value": self.value,
            "unit": self.unit,
            "time": self.timestamp,
            "tags": self.tags,
        }
        return obj

    def as_message(self):
        return json.dumps(self.as_dict())


class MetricEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Metric):
            return obj.as_message()
        return json.JSONEncoder.default(self, obj)


class Constant(object):
    def __init__(self, constant_type, constant_value):
        self._value = None

        if constant_type == ConstantType.FLOAT.value:
            self._value = float(constant_value)
        elif constant_type == ConstantType.INT.value:
            self._value = float(constant_value)
        elif constant_type == ConstantType.STRING.value:
            self._value = str(constant_value)
        elif constant_type == ConstantType.LIST.value:
            self._value = list(json.loads(constant_value))
        else:
            raise ConstantTypeNotSupportedError(
                message_kv={"constant_type": constant_type}
            )

    @property
    def value(self):
        return self._value
