# -*- coding: utf-8 -*-
"""
Tencent is pleased to support the open source community by making BK-BASE 蓝鲸基础平台 available.
Copyright (C) 2021 THL A29 Limited, a Tencent company.  All rights reserved.
BK-BASE 蓝鲸基础平台 is licensed under the MIT License.
License for BK-BASE 蓝鲸基础平台:
--------------------------------------------------------------------
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import copy
import json

from mako.template import Template

from dataquality.settings import EVENT_MEASUREMENT, EVENT_TSDB_DB


class Event(object):
    """
    The event instance of the determined dimensions(tags).
    Generated by the EventFactory
    """

    def __init__(
        self,
        event_config,
        event_time,
        event_level,
        event_status_alias,
        platform,
        generate_type,
        origin,
        dimensions=None,
    ):
        super(Event, self).__init__()
        self._event_id = event_config.event_id
        self._event_name = event_config.event_name
        self._event_config = event_config
        self._event_time = event_time
        self._event_level = event_level
        self._event_status_alias = event_status_alias
        self._platform = platform
        self._generate_type = generate_type
        self._event_origin = origin
        self._dimensions = dimensions

    def __bool__(self):
        """
        Whether the event is happening
        """
        pass

    @property
    def id(self):
        return self._event_id

    @property
    def name(self):
        return self._event_name

    @property
    def time(self):
        return self._event_time

    @property
    def level(self):
        return self._event_level

    @property
    def dimensions(self):
        return self._dimensions

    def get_dimension(self, dimension, default_value=None):
        return self._dimensions.get(dimension, default_value)

    def add_dimension(self, tag, value):
        self._tags[tag] = value

    def as_dict(self):
        obj = {
            "event_id": self._event_id,
            "event_name": self._event_name,
            "event_alias": self._event_config.event_alias,
            "event_currency": self._event_config.event_currency,
            "event_type": self._event_config.event_type,
            "event_sub_type": self._event_config.event_sub_type,
            "event_polarity": self._event_config.event_polarity,
            "event_status_alias": self._event_status_alias.replace("\n", "\\n"),
            "sensitivity": self._event_config.sensitivity,
            "event_time": self._event_time,
            "event_level": self._event_level,
            "platform": self._platform,
            "generate_type": self._generate_type,
            "dimensions": self._dimensions,
        }
        event_detail = (
            Template(self._event_config.event_detail_template)
            .render(**obj)
            .format(**self._dimensions)
        )
        obj["event_detail"] = event_detail.replace("\n", "\\n")
        return obj

    def as_tsdb_data(self):
        data = self.as_dict()

        tags = copy.deepcopy(self._dimensions)
        tags.update(
            {
                "event_id": self._event_id,
                "event_type": self._event_config.event_type,
                "event_sub_type": self._event_config.event_sub_type,
                "event_polarity": self._event_config.event_polarity,
                "event_status_alias": self._event_status_alias.replace("\n", "\\n"),
                "sensitivity": self._event_config.sensitivity,
                "event_level": self._event_level,
                "platform": self._platform,
                "generate_type": self._generate_type,
            }
        )
        return json.dumps(
            {
                "time": self._event_time,
                "database": EVENT_TSDB_DB,
                EVENT_MEASUREMENT: {
                    "event_detail": data["event_detail"].replace("\n", "\\n"),
                    "tags": tags,
                },
            }
        )

    def as_message(self):
        return json.dumps(self.as_dict())
